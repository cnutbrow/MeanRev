import requests
import pandas as pd
import time
import plotly.graph_objects as go
import plotly.io as pio
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
pio.renderers.default = 'browser'



def get(t, h):
    curr = str(int(time.time()))
    old = str(int(time.time()) - h * 86400)
    
    url = f'https://api.coingecko.com/api/v3/coins/{t.lower()}/market_chart/range?vs_currency=usd&from={old}&to={curr}&x_cg_demo_api_key=YOUR_API_KEY_HERE'
    
    r = requests.get(url)
    
    if r.status_code != 200:
        raise Exception(f"API request failed with status code {r.status_code}")
    
    data = r.json()

    if not all(k in data for k in ["prices", "market_caps", "total_volumes"]):
        raise Exception(f"Missing keys in response: {list(data.keys())}")
    
    df_wrangled = pd.DataFrame({
        "timestamp": [x[0] for x in data["prices"]],
        "price": [x[1] for x in data["prices"]],
        "market_cap": [x[1] for x in data["market_caps"]],
        "total_volume": [x[1] for x in data["total_volumes"]],
    })
    df_wrangled["timestamp"] = pd.to_datetime(df_wrangled["timestamp"], unit='ms')
    df_wrangled.set_index("timestamp", inplace=True)
    return df_wrangled
def cmr(df, window=20, k=2):
    df = df.copy()
    df['rolling_mean'] = df['price'].rolling(window).mean()
    df['rolling_std'] = df['price'].rolling(window).std()

    df['upper_band'] = df['rolling_mean'] + k * df['rolling_std']
    df['lower_band'] = df['rolling_mean'] - k * df['rolling_std']

    df['signal'] = 'Hold'
    df.loc[df['price'] < df['lower_band'], 'signal'] = 'Buy'
    df.loc[df['price'] > df['upper_band'], 'signal'] = 'Sell'
    return df
def pmr(df, title="Mean Reversion Strategy"):
    fig = go.Figure()
    fig.add_trace(go.Scatter(x=df.index, y=df['price'], name='Price', line=dict(color='black')))
    fig.add_trace(go.Scatter(x=df.index, y=df['rolling_mean'], name='Mean', line=dict(dash='dot')))
    fig.add_trace(go.Scatter(x=df.index, y=df['upper_band'], name='Upper Band', line=dict(color='gray', dash='dot')))
    fig.add_trace(go.Scatter(x=df.index, y=df['lower_band'], name='Lower Band', line=dict(color='gray', dash='dot')))


    buys = df[df['signal'] == 'Buy']
    sells = df[df['signal'] == 'Sell']

    fig.add_trace(go.Scatter(
        x=buys.index, y=buys['price'], mode='markers', name='Buy',
        marker=dict(symbol='triangle-up', size=10, color='green')
    ))

    fig.add_trace(go.Scatter(
        x=sells.index, y=sells['price'], mode='markers', name='Sell',
        marker=dict(symbol='triangle-down', size=10, color='red')
    ))

    fig.update_layout(title=title, xaxis_title="Time", yaxis_title="Price",
                      legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1))

    return fig
def cback(df, initial_cash=10000, m=0.5):
    df = df.copy()
    df['cash'] = initial_cash
    df['coins'] = 0.0
    df['portfolio_value'] = initial_cash

    for i in range(1, len(df)):
        row = df.iloc[i]
        prev = df.iloc[i - 1]

        cash = prev['cash']
        coins = prev['coins']
        price = row['price']

        if row['signal'] == 'Buy' and coins == 0:
            invest_amount = cash * m
            coins = invest_amount / price
            cash -= invest_amount
        elif row['signal'] == 'Sell' and coins > 0:
            cash += coins * price
            coins = 0

        df.at[df.index[i], 'cash'] = cash
        df.at[df.index[i], 'coins'] = coins
        df.at[df.index[i], 'portfolio_value'] = cash + coins * price

    return df


def cbtot(df):
    return float((df['portfolio_value'].iloc[-1] - 10000) / 10000 * 100)


def optimizer(t):
    raw_df = get(t, 89)

    res = pd.DataFrame({
        'Window': pd.Series(dtype='int'),
        'k': pd.Series(dtype='float'),
        'm': pd.Series(dtype='float'),
        'Total Return': pd.Series(dtype='float')
    })

    count = 0
    for window in range(10, 410, 5):
        for k in [1.0, 1.1, 1.2 , 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9,
                  3.0]:
            for m in [0.7, 0.8, 0.9, 1.0]:
                df = raw_df.copy()
                df = cmr(df, window=window, k=k)
                df = cback(df, m=m)
                total_return = cbtot(df)
                res = pd.concat([res, pd.DataFrame([{
                    'Window': int(window),
                    'k': float(k),
                    'm': float(m),
                    'Total Return': total_return
                }])], ignore_index=True)
                count += 1
                if count % 100 == 0:
                    print(f"Percent Complete: {count / 67.2}%\n")

    res = res.sort_values(by='Total Return', ascending=False).reset_index(drop=True)
    return res


for coin in ['bitcoin', 'ethereum', 'ripple', 'litecoin', 'dogecoin']:
    print(f"Optimizing for {coin}...")
    df = optimizer(coin)
    print(df)
    df.to_csv(f'{coin}.csv', index=False)